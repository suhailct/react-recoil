{"version":3,"sources":["logo.svg","todolistrecoil.js","todoitem.js","todoListCreator.js","todolistFilter.js","todoListStats.js","todolist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","todoListState","atom","key","default","todoListFilterState","filteredTodoState","selector","get","filter","state","item","isComplete","todoListStats","getCompletedCount","length","getUncompletedCount","getTotalCount","replaceItemAtIndex","list","index","slice","React","memo","useRecoilState","todoList","setTodoList","findIndex","listItem","console","log","type","value","text","onChange","target","newList","checked","onClick","arr","removeItemAtIndex","TodoListCreator","useState","changeText","setTodos","useSetRecoilState","old","TodoListFilters","setFilter","selected","TodoListStat","counts","useRecoilValue","TodoList","todos","map","it","i","textState","CharacterCounter","TextInput","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.141966d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { atom, selector } from \"recoil\";\r\n\r\nexport const todoListState = atom({\r\n    key: 'todoListState',\r\n    default: [],\r\n  });\r\n\r\n export const todoListFilterState = atom({\r\n    key: 'todoListFilterState',\r\n    default: 'Show All',\r\n  });\r\n\r\nexport const filteredTodoState=selector({\r\n  key:'filteredTodoState',\r\n   get:({get})=>{\r\n     const filter=get(todoListFilterState);\r\n     const state=get(todoListState);\r\n     \r\n     switch(filter){\r\n      case 'Show Completed':\r\n        return state.filter((item) => item.isComplete);\r\n      case 'Show Uncompleted':\r\n          return state.filter((item) => !item.isComplete);\r\n      default:\r\n          return state;\r\n\r\n     }\r\n   }\r\n})\r\n\r\n export const todoListStats=selector({\r\n   key:'todoListStats',\r\n   get:({get})=>{\r\n     const state=get(filteredTodoState);\r\n     return{\r\n       getCompletedCount:state.filter((item)=>item.isComplete===true).length,\r\n       getUncompletedCount:state.filter((item)=>item.isComplete===false).length,\r\n       getTotalCount:state.length\r\n     }\r\n   }\r\n })\r\n export default todoListStats;","import React from 'react'\r\nimport { useRecoilState } from 'recoil'\r\nimport { todoListState } from './todolistrecoil'\r\n\r\n const  TodoItem=({item})=>{\r\n    const [todoList, setTodoList] = useRecoilState(todoListState);\r\n    const index = todoList.findIndex((listItem) => listItem === item);\r\n    console.log(index);\r\n   const toggleItemCompletion=()=>{\r\n    const newList=replaceItemAtIndex(todoList,index,{\r\n        ...item,\r\n        isComplete:!item.isComplete\r\n    });\r\n    setTodoList(newList);\r\n    }\r\n\r\n    const editItemText=({target: {value}})=>{\r\n      const newList=replaceItemAtIndex(todoList,index,{\r\n          ...item,\r\n          text:value\r\n      });\r\n      setTodoList(newList);\r\n    }\r\n\r\n    const deleteItem = () => {\r\n        const newList = removeItemAtIndex(todoList, index);\r\n    \r\n        setTodoList(newList);\r\n      };\r\n      \r\n    return (\r\n        <div>\r\n         <input type=\"text\" value={item.text} onChange={editItemText}/>\r\n         <input type=\"checkbox\"  checked={item.isComplete}\r\n        onChange={toggleItemCompletion}\r\n        />\r\n        <button onClick={deleteItem}>X</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst replaceItemAtIndex=(list,index,item)=>{\r\n    return [...list.slice(0,index),item,...list.slice(index+1)]\r\n}\r\n\r\nfunction removeItemAtIndex(arr, index) {\r\n    return [...arr.slice(0, index), ...arr.slice(index + 1)];\r\n  }\r\n\r\nexport default React.memo(TodoItem);","import React, { useState } from 'react'\r\nimport { useRecoilState, useSetRecoilState } from 'recoil';\r\nimport { todoListState } from './todolistrecoil';\r\n\r\nfunction TodoListCreator(){\r\nconst[text,changeText]=useState('')\r\nconst setTodos=useSetRecoilState(todoListState);\r\n\r\nconst submitTodo=()=>{\r\n\r\nsetTodos((old)=>[\r\n...old,\r\n{\r\n    text,\r\n    isComplete:false\r\n}\r\n]);\r\nchangeText('');\r\n\r\n}\r\n\r\nconst onChange=({target:{value}})=>{\r\n changeText(value);\r\n}\r\n\r\nreturn(\r\n    <div>\r\n     <input onChange={onChange} value={text}/>\r\n     <button onClick={submitTodo}>Submit</button>\r\n    </div>\r\n    \r\n)\r\n\r\n}\r\n\r\nexport default TodoListCreator;","import React from 'react'\r\nimport { useRecoilState } from 'recoil';\r\nimport { todoListFilterState } from './todolistrecoil';\r\n\r\n const TodoListFilters=()=>{\r\n    const [filter,setFilter]=useRecoilState(todoListFilterState);\r\n\r\n    const onChange=({target:{value}})=>{\r\n        setFilter(value);\r\n    }\r\n\r\n    return(\r\n        <>\r\n         <select value={filter} onChange={onChange}>\r\n           <option value=\"select filter\"  selected>select filter</option>\r\n           <option value=\"Show Completed\">completed</option>\r\n           <option value=\"Show Uncompleted\">pending</option>\r\n         </select>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoListFilters;","import React from 'react'\r\nimport { useRecoilValue } from 'recoil'\r\nimport todoListStats from './todolistrecoil';\r\n\r\nconst TodoListStat=()=>{\r\n    const counts=useRecoilValue(todoListStats);\r\n\r\n    return(\r\n        <>\r\n        <p>total tasks:{counts.getTotalCount}</p>\r\n        <p>completed tasks:{counts.getCompletedCount}</p>\r\n        <p>un-completed tasks:{counts.getUncompletedCount}</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoListStat;","import React from 'react'\r\nimport { useRecoilValue } from 'recoil'\r\nimport  { todoListState, filteredTodoState } from './todolistrecoil'\r\nimport TodoItem from \"./todoitem\";\r\nimport TodoListCreator from './todoListCreator';\r\nimport TodoListFilters from './todolistFilter';\r\nimport TodoListStat from './todoListStats'\r\nfunction TodoList(){\r\n    const todos=useRecoilValue(filteredTodoState);\r\nreturn(\r\n    <>\r\n     <TodoListStat/>\r\n     <TodoListFilters/>\r\n     <TodoListCreator/>\r\n     {todos.length>0?todos.map((it,i)=>(\r\n         <TodoItem key={i} item={it} />\r\n     )):<p>add items to list</p>}\r\n    </>\r\n)\r\n}\r\n\r\n\r\nexport default TodoList;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from 'recoil';\nimport TodoList from './todolist';\n\nconst textState = atom({\n  key: 'textState', // unique ID (with respect to other atoms/selectors)\n  default: '', // default value (aka initial value)\n});\n\nfunction App() {\n  return (\n    <>\n    <RecoilRoot>\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <CharacterCounter />\n        </header>\n      </div>\n    </RecoilRoot>\n </>\n );\n}\n\nfunction CharacterCounter() {\n  return (\n    <div>\n      <TextInput />\n      {/* <CharacterCount /> */}\n    </div>\n  );\n}\n\nfunction TextInput() {\n  const [text, setText] = useRecoilState(textState);\n\n  const onChange = (event) => {\n    setText(event.target.value);\n  };\n\n  return (\n    <div>\n      {/* <input type=\"text\" value={text} onChange={onChange} />\n      <br />\n      Echo: {text} */}\n      <TodoList/>\n    </div>\n  );\n}\n\nconst charCountState = selector({\n  key: 'charCountState', // unique ID (with respect to other atoms/selectors)\n  get: ({get}) => {\n    const text = get(textState);\n\n    return text.length;\n  },\n});\n\n\nfunction CharacterCount() {\n  const count = useRecoilValue(charCountState);\n\n  return <>Character Count: {count}</>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}